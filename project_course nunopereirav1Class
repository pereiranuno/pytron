class Event:
    def __init__(self, show: str, event: str, timestamp: int, user_id: int):
        self.show = show
        self.event = event
        self.timestamp = timestamp
        self.user_id = user_id

class RegistryProcessor:
    def __init__(self) -> None:
        self.active_users_show = {}
      
    def update_active_users_per_show(self, eventlist: Event) -> None:
        if eventlist.event == 'start':
            if eventlist.show not in self.active_users_show:
                self.active_users_show[eventlist.show] = set()
            self.active_users_show[eventlist.show].add(eventlist.user_id)
        elif eventlist.event == 'stop':
            if eventlist.show in self.active_users_show and eventlist.user_id in self.active_users_show[eventlist.show]:
                self.active_users_show[eventlist.show].remove(eventlist.user_id)

    
    def calculate_active_users_per_show(self, registry_list:list[dict]) -> None:       
        sorted_registry = sorted(registry_list, key=lambda x: x.timestamp)
        for event in sorted_registry:
            self.update_active_users_per_show(event)
        
        self.print_active_users()

    def print_active_users(self,keyname:str,valuename:str) -> None:

        print("\nActive Users per Show:")
        print("-" * 30)
        for show, users in self.active_users_show.items():
            print(f"{keyname}: {show:25} | {valuename}: {len(users)}")
        print("-" * 30 + "\n")    


# --- DataSet Dic Registry List ---
registry_list = [
    {
        "show": "The Witcher",
        "event": "start",
        "timestamp": 0,
        "user_id": 1
    },
    {
        "show": "The Witcher",
        "event": "start",
        "timestamp": 1,
        "user_id": 2
    },
    {
        "show": "The Witcher",
        "event": "stop",
        "timestamp": 3,
        "user_id": 2
    },
    {
        "show": "The Umbrella Academy",
        "event": "start",
        "timestamp": 4,
        "user_id": 1
    },
    {
        "show": "The Umbrella Academy",
        "event": "stop",
        "timestamp": 5,
        "user_id": 1
    },
]


registry_list = [
    Event("The Witcher", "start", 0, 1),
    Event("The Witcher", "start", 1, 2),
    Event("The Witcher", "stop", 3, 2),
    Event("The Umbrella Academy", "start", 4, 1),
    Event("The Umbrella Academy", "stop", 5, 1),
]

RegistryProcessor = RegistryProcessor()
RegistryProcessor.calculate_active_users_per_show(registry_list)