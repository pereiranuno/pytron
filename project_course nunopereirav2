#---Fucntions---

def calculate_active_users_per_show(registry_list:list[dict]) -> dict:
    '''
    Calculate the active users per show in a given registry list.
    
    Parameters
    ----------
    registry_list : list of dictionaries
        A list of dictionaries with the following elements:
            - timestamp: int
            - event: str
            - show: str
            - user_id: int
            
    Returns
    -------
    None
    
    Notes
    -----
    This function creates a dictionary of active users per show.
    The dictionary is created by iterating over the sorted registry and adding the user_id to the set of active users for each show.
    The active users are then printed in the format "show: number of active users".
    '''
    active_users_show = {}
    sorted_registry = sorted(registry_list, key=lambda x: (x['timestamp']))

    for event in sorted_registry:
        if event['event'] == 'start':
            if event['show'] not in active_users_show:
                active_users_show[event['show']] = set()
            active_users_show[event['show']].add(event['user_id'])
        elif event['event'] == 'stop':
            if event['show'] in active_users_show and event['user_id'] in active_users_show[event['show']]:
                active_users_show[event['show']].remove(event['user_id'])

    
    return(active_users_show)

def print_formated_output(event_collection:list[dict],keyname:str,valuename:str) -> None:
 
    '''
    Print the active users per show in a formated string.
    
    Parameters
    ----------
    event_collection : list of dictionaries
        A list of dictionaries
                
    Returns
    -------
    None
    
    Notes
    -----
    This function prints in the console the active users per show in a formated string.
    The format is "Show: [show name] | Active Users: [number of active users]"
    The shows are printed in the order they appear in the input list.
    '''
    print("\nActive Users per Show:\n" + "-" * 30)
    for key,value in event_collection.items():
        print(f"{keyname}: {key:23} |{valuename}:{len(value)}")
    print("-" * 30 + "\n")

def conver_tabular_file_content_to_dictionary(filename) -> dict:
    
        with open(filename, "r") as registry_tabular:
                registry_list = []
                registry_fields = ["show", "event", "timestamp", "user_id"]
                for line in registry_tabular.readlines():
                        line = line.strip().split("\t")
                        registry = {}
                        for i in range(len(registry_fields)):
                                registry[registry_fields[i]] = line[i]
                        registry_list.append(registry)
                return(registry_list)

#---Main Code---
'''
old registry list
registry_list = [
    {"show": "The Witcher", "event": "start", "timestamp": 0, "user_id": 1},
    {"show": "The Witcher", "event": "start", "timestamp": 1, "user_id": 2},
    {"show": "The Witcher", "event": "stop", "timestamp": 2, "user_id": 2},
    {"show": "The Umbrella Academy", "event": "start", "timestamp": 3, "user_id": 1},
    {"show": "The Umbrella Academy", "event": "stop", "timestamp": 4, "user_id": 1},
    {"show": "Brooklyn Nine-Nine", "event": "start", "timestamp": 5, "user_id": 3},
    {"show": "Brooklyn Nine-Nine", "event": "stop", "timestamp": 6, "user_id": 3},
    {"show": "One Piece", "event": "start", "timestamp": 7, "user_id": 4},
    {"show": "One Piece", "event": "stop", "timestamp": 8, "user_id": 4},
    {"show": "One Piece", "event": "start", "timestamp": 9, "user_id": 5},
    {"show": "One Piece", "event": "start", "timestamp": 10, "user_id": 2},
]
'''

if __name__ == "__main__":
    registry_list = conver_tabular_file_content_to_dictionary("events.tsv")
    print_formated_output(calculate_active_users_per_show(registry_list),'Show','Active Users')

#---Tests---

#Test1 -  Final Output is Correct
def test_calc_active_users_per_show_is_outputted():
    assert calculate_active_users_per_show(registry_list) == {"The Witcher": 1, "The Umbrella Academy": 0, "Brooklyn Nine-Nine": 0, "One Piece": 2}

#Test2 -  Stop Event, disable Active User
def test_disable_active_user_on_stop_event():
    result_2 = {}
    registry_list_2 = [
        {"show": "The Witcher", "event": "start", "timestamp": 0, "user_id": 1},
        {"show": "The Witcher", "event": "stop", "timestamp": 1, "user_id": 1},
    ]
    assert  calculate_active_users_per_show(registry_list_2) == {"The Witcher": set()}
   

