def calculate_active_users_per_show(registry_list:list[dict]) -> None:
    '''
    Calculate the active users per show in a given registry list.
    
    Parameters
    ----------
    registry_list : list of dictionaries
        A list of dictionaries with the following elements:
            - timestamp: int
            - event: str
            - show: str
            - user_id: int
            
    Returns
    -------
    None
    
    Notes
    -----
    This function creates a dictionary of active users per show.
    The dictionary is created by iterating over the sorted registry and adding the user_id to the set of active users for each show.
    The active users are then printed in the format "show: number of active users".
    '''
    active_users_show = {}
    #show_list = get_distinct_values_dictionary(registry_list,'show')
    sorted_registry = sorted(registry_list, key=lambda x: (x['timestamp']))

    for event in sorted_registry:
        if event['event'] == 'start':
            if event['show'] not in active_users_show:
                active_users_show[event['show']] = set()
            active_users_show[event['show']].add(event['user_id'])
        elif event['event'] == 'stop':
            if event['show'] in active_users_show and event['user_id'] in active_users_show[event['show']]:
                active_users_show[event['show']].remove(event['user_id'])

    print_formated_output(active_users_show)

def print_formated_output(event_collection:list[dict]) -> None:
 
    '''
    Print the active users per show in a formated string.
    
    Parameters
    ----------
    event_collection : list of dictionaries
        A list of dictionaries with the following elements:
            - key: str
            - value: set of int
                
    Returns
    -------
    None
    
    Notes
    -----
    This function prints in the console the active users per show in a formated string.
    The format is "Show: [show name] | Active Users: [number of active users]"
    The shows are printed in the order they appear in the input list.
    '''
    print("\nActive Users per Show:\n" + "-" * 30)
    for key,value in event_collection.items():
        print(f"Show: {key:23} | Active Users: {len(value)}")
    print("-" * 30 + "\n")


def get_distinct_values_dictionary(registry,outputelement):
    '''
    Return a set of distinct values from a list of dictionaries.
    '''
    newsetlist = set(element[outputelement] for element in registry)
    return newsetlist

#---DataSet Dic Registry List---

registry_list = [
    {
        "show": "The Witcher",
        "event": "start",
        "timestamp": 0,
        "user_id": 1
    },
    {
        "show": "The Witcher",
        "event": "start",
        "timestamp": 1,
        "user_id": 2
    },
    {
        "show": "The Witcher",
        "event": "stop",
        "timestamp": 3,
        "user_id": 2
    },
    {
        "show": "The Umbrella Academy",
        "event": "start",
        "timestamp": 4,
        "user_id": 1
    },
    {
        "show": "The Umbrella Academy",
        "event": "stop",
        "timestamp": 5,
        "user_id": 1
    },
]

registry_list = [
    {"show": "The Witcher", "event": "start", "timestamp": 0, "user_id": 1},
    {"show": "The Witcher", "event": "start", "timestamp": 1, "user_id": 2},
    {"show": "The Witcher", "event": "stop", "timestamp": 2, "user_id": 2},
    {"show": "The Umbrella Academy", "event": "start", "timestamp": 3, "user_id": 1},
    {"show": "The Umbrella Academy", "event": "stop", "timestamp": 4, "user_id": 1},
    {"show": "Brooklyn Nine-Nine", "event": "start", "timestamp": 5, "user_id": 3},
    {"show": "Brooklyn Nine-Nine", "event": "stop", "timestamp": 6, "user_id": 3},
    {"show": "One Piece", "event": "start", "timestamp": 7, "user_id": 4},
    {"show": "One Piece", "event": "stop", "timestamp": 8, "user_id": 4},
    {"show": "One Piece", "event": "start", "timestamp": 9, "user_id": 5},
    {"show": "One Piece", "event": "start", "timestamp": 10, "user_id": 2},
]



def main():
    """
    Calls calculate_active_users_per_show with the given registry_list and prints the results to the console.

    Parameters
    ----------
    None

    Returns
    -------
    None
    """
    calculate_active_users_per_show(registry_list)


main()
